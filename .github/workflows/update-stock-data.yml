 #!/usr/bin/env python3
  """
  GitHub Actions用株価データ生成スクリプト
  Alpha Vantage APIから株価データを取得してJSONファイルを生成
  """

  import requests
  import json
  import os
  import time
  from datetime import datetime, timezone, timedelta

  # Alpha Vantage API設定
  API_KEY = os.getenv('ALPHA_VANTAGE_API_KEY')
  BASE_URL = "https://www.alphavantage.co/query"

  # 監視銘柄リスト - 日本株25銘柄でAPI上限500calls完全活用
  STOCKS_TO_MONITOR = {
      # 主要日本株25銘柄
      "7203.T": {"name": "トヨタ自動車", "country": "JP", "category": "automotive"},
      "9984.T": {"name": "ソフトバンクグループ", "country": "JP", "category": "telecom"},
      "6758.T": {"name": "ソニーグループ", "country": "JP", "category": "electronics"},
      "9433.T": {"name": "KDDI", "country": "JP", "category": "telecom"},
      "6861.T": {"name": "キーエンス", "country": "JP", "category": "industrial"},
      "8035.T": {"name": "東京エレクトロン", "country": "JP", "category": "tech"},
      "4755.T": {"name": "楽天グループ", "country": "JP", "category": "ecommerce"},
      "4502.T": {"name": "武田薬品工業", "country": "JP", "category": "pharma"},
      "8001.T": {"name": "伊藤忠商事", "country": "JP", "category": "trading"},
      "7974.T": {"name": "任天堂", "country": "JP", "category": "gaming"},
      "8766.T": {"name": "東京海上ホールディングス", "country": "JP", "category": "finance"},
      "9020.T": {"name": "東日本旅客鉄道", "country": "JP", "category": "transport"},
      "4568.T": {"name": "第一三共", "country": "JP", "category": "pharma"},
      "6098.T": {"name": "リクルートホールディングス", "country": "JP", "category": "services"},
      "8058.T": {"name": "三菱商事", "country": "JP", "category": "trading"},
      "6954.T": {"name": "ファナック", "country": "JP", "category": "industrial"},
      "9432.T": {"name": "日本電信電話", "country": "JP", "category": "telecom"},
      "4063.T": {"name": "信越化学工業", "country": "JP", "category": "chemicals"},
      "7267.T": {"name": "ホンダ", "country": "JP", "category": "automotive"},
      "6367.T": {"name": "ダイキン工業", "country": "JP", "category": "industrial"},
      "4519.T": {"name": "中外製薬", "country": "JP", "category": "pharma"},
      "9735.T": {"name": "セコム", "country": "JP", "category": "security"},
      "4578.T": {"name": "大塚ホールディングス", "country": "JP", "category": "pharma"},
      "6326.T": {"name": "クボタ", "country": "JP", "category": "industrial"},
      "7751.T": {"name": "キヤノン", "country": "JP", "category": "electronics"}
  }

  def fetch_stock_data(symbol):
      """Alpha Vantage APIから個別銘柄データを取得"""
      try:
          params = {
              'function': 'GLOBAL_QUOTE',
              'symbol': symbol,
              'apikey': API_KEY
          }

          response = requests.get(BASE_URL, params=params, timeout=10)
          data = response.json()

          if 'Global Quote' in data:
              quote = data['Global Quote']
              return {
                  'price': float(quote.get('05. price', 0)),
                  'change': float(quote.get('09. change', 0)),
                  'change_percent': float(quote.get('10. change percent', '0%').replace('%', '')),
                  'volume': int(quote.get('06. volume', 0)),
                  'last_update': datetime.now(timezone.utc).isoformat()
              }
          else:
              print(f"API Error for {symbol}: {data}")
              return None

      except Exception as e:
          print(f"Error fetching {symbol}: {e}")
          return None

  def generate_mock_data():
      """APIが利用できない場合のモックデータ生成"""
      import random

      stocks = []
      for symbol, info in STOCKS_TO_MONITOR.items():
          base_price = 2000  # 日本株のベース価格
          price_variation = random.uniform(0.8, 1.2)
          price = round(base_price * price_variation, 2)

          change_percent = random.uniform(-3, 3)
          change = round(price * (change_percent / 100), 2)

          stocks.append({
              'symbol': symbol,
              'name': info['name'],
              'country': info['country'],
              'category': info['category'],
              'price': price,
              'change': change,
              'changePercent': change_percent,
              'volume': random.randint(100000, 2000000),
              'lastUpdate': datetime.now(timezone.utc).isoformat()
          })

      return stocks

  def main():
      """メイン処理"""
      print("📊 Stock data generation started...")

      if not API_KEY or API_KEY == 'YOUR_ALPHA_VANTAGE_API_KEY_HERE':
          print("⚠️ No Alpha Vantage API key found, generating mock data...")
          stocks = generate_mock_data()
      else:
          print("🔗 Fetching real data from Alpha Vantage API...")
          stocks = []

          for symbol, info in STOCKS_TO_MONITOR.items():
              print(f"  Fetching {symbol}...")

              stock_data = fetch_stock_data(symbol)

              if stock_data:
                  stocks.append({
                      'symbol': symbol,
                      'name': info['name'],
                      'country': info['country'],
                      'category': info['category'],
                      'price': stock_data['price'],
                      'change': stock_data['change'],
                      'changePercent': stock_data['change_percent'],
                      'volume': stock_data.get('volume', 0),
                      'lastUpdate': stock_data['last_update']
                  })

                  # API制限対策: 25銘柄対応 (5 API calls/minute = 12秒間隔)
                  time.sleep(12.1)
              else:
                  print(f"  Failed to fetch {symbol}, skipping...")

      # データファイル保存
      output_dir = 'stock-monitor-pro/data'
      os.makedirs(output_dir, exist_ok=True)

      output_data = {
          'success': True,
          'timestamp': datetime.now(timezone.utc).isoformat(),
          'total': len(stocks),
          'data': stocks
      }

      output_file = os.path.join(output_dir, 'stocks.json')
      with open(output_file, 'w', encoding='utf-8') as f:
          json.dump(output_data, f, ensure_ascii=False, indent=2)

      print(f"✅ Generated data for {len(stocks)} stocks")
      print(f"📁 Saved to: {output_file}")

  if __name__ == '__main__':
      main()

  2. .github/workflows/update-stock-data.yml (20回/日版):

  name: Update Stock Data

  on:
    schedule:
      # 🔥 API制限500calls/日を完全活用: 25銘柄×20回=500calls (約25分間隔)
      - cron: '0,25,50 0 * * 1-5'          # 09:00, 09:25, 09:50 JST (3回)
      - cron: '15,40 1 * * 1-5'            # 10:15, 10:40 JST (2回)
      - cron: '5,30 2 * * 1-5'             # 11:05, 11:30 JST (2回)
      - cron: '0,25,50 4 * * 1-5'          # 13:00, 13:25, 13:50 JST (3回)
      - cron: '15,40 5 * * 1-5'            # 14:15, 14:40 JST (2回)
      - cron: '5,30,55 6 * * 1-5'          # 15:05, 15:30, 15:55 JST (3回)
      - cron: '20,45 7 * * 1-5'            # 16:20, 16:45 JST (2回)
      - cron: '10,35 8 * * 1-5'            # 17:10, 17:35 JST (2回)
      - cron: '0 9 * * 1-5'                # 18:00 JST (1回)
      # 合計: 3+2+2+3+2+3+2+2+1 = 20回/日
    workflow_dispatch: # 手動実行可能

  env:
    ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}

  jobs:
    update-stock-data:
      runs-on: ubuntu-latest

      permissions:
        contents: write

      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Create data directory
        run: |
          mkdir -p stock-monitor-pro/data

      - name: Generate stock data
        run: |
          python generate_stock_data.py

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add stock-monitor-pro/data/stocks.json
          git diff --staged --quiet || git commit -m "📊 Update 25 Japanese stocks - $(date '+%Y-%m-%d %H:%M')"
          git push
